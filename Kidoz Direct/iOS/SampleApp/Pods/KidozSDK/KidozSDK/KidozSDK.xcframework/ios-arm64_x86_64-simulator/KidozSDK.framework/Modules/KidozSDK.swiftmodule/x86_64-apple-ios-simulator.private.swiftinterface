// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KidozSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFAudio
import Foundation
import JavaScriptCore
@_exported import KidozSDK
import StoreKit.SKStoreProductViewController
import StoreKit
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@objc public protocol KidozInterstitialDelegate {
  @objc func onInterstitialAdLoaded(ad: KidozSDK.KidozInterstitialAd)
  @objc func onInterstitialAdFailedToLoad(error: KidozSDK.KidozError)
  @objc func onInterstitialAdShown(ad: KidozSDK.KidozInterstitialAd)
  @objc func onInterstitialAdFailedToShow(error: KidozSDK.KidozError)
  @objc func onInterstitialImpression()
  @objc func onInterstitialAdClosed(ad: KidozSDK.KidozInterstitialAd)
}
@_inheritsConvenienceInitializers @objc public class KidozSessionData : ObjectiveC.NSObject {
  @objc public static var isSKAdNetworkIdentifierSet: Swift.Bool
  @objc public static var supportedSKADNetworkIds: Swift.String?
  @objc public static var extensionType: Swift.String
  @objc public static var extensionVersion: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol KidozRewardedDelegate {
  @objc func onRewardedAdLoaded(ad: KidozSDK.KidozRewardedAd)
  @objc func onRewardedAdFailedToLoad(error: KidozSDK.KidozError)
  @objc func onRewardedAdShown(ad: KidozSDK.KidozRewardedAd)
  @objc func onRewardedAdFailedToShow(error: KidozSDK.KidozError)
  @objc func onRewardReceived(ad: KidozSDK.KidozRewardedAd)
  @objc func onRewardedImpression()
  @objc func onRewardedAdClosed(ad: KidozSDK.KidozRewardedAd)
}
@_hasMissingDesignatedInitializers public class StringUtils {
  public static func convertJSONStringToDictionary(json: Swift.String?) -> [Swift.String : Swift.AnyObject]?
  public static func convertHashableDictionatyToJSONString(dictionary: [Swift.AnyHashable : Any]) -> Swift.String?
  public static func urlToParams(_ url: Foundation.URL) -> [Foundation.URLQueryItem]?
  public static func stringIsEmpty(_ string: Swift.String?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class KidozLogger {
  public static func d(_ tag: Swift.String, _ message: Swift.String)
  public static func e(_ tag: Swift.String, _ message: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(KidozBannerView) @_Concurrency.MainActor(unsafe) public class KidozBannerView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public static let BANNER_WIDTH: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public static let BANNER_HEIGHT: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var isAutoShow: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var delegate: KidozSDK.KidozBannerDelegate?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) public func load()
  @objc @_Concurrency.MainActor(unsafe) public func show()
  @objc @_Concurrency.MainActor(unsafe) public func setBannerPosition(_ bannerPosition: KidozSDK.BANNER_POSITION)
  @objc @_Concurrency.MainActor(unsafe) public func close()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AssetsManager : ObjectiveC.NSObject {
  @objc public static func getAnswerImageButtonFile() -> UIKit.UIImage
  @objc public static func getCrossBlueImageButtonFile() -> UIKit.UIImage
  @objc public static func getWebViewCloseButtonFile() -> UIKit.UIImage
  @objc public static func getDividerImageFile() -> UIKit.UIImage
  @objc override dynamic public init()
  @objc deinit
}
@objc(KidozError) public class KidozError : ObjectiveC.NSObject {
  @objc public var errorCode: Swift.Int
  @objc public var message: Swift.String
  public static var GENERAL_ERROR: Swift.Int
  @objc public static var LOAD_ERROR: Swift.Int
  public static var NO_FILL: Swift.Int
  @objc public static var SHOW_ERROR: Swift.Int
  public static var INSTANCE_ALREADY_LOADING: Swift.Int
  @objc public init(errorCode: Swift.Int, message: Swift.String)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PlistUtil) public class PlistUtil : ObjectiveC.NSObject {
  @objc public static func checkKidozSKADNetworkIdExist(networkId: Swift.String) -> Swift.Bool
  @objc public static func getSKADNetworkIds() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol KidozBannerDelegate {
  @objc func onBannerAdLoaded()
  @objc func onBannerAdFailedToLoad(error: KidozSDK.KidozError)
  @objc func onBannerAdShown()
  @objc func onBannerAdFailedToShow(error: KidozSDK.KidozError)
  @objc func onBannerAdImpression()
  @objc func onBannerAdClosed()
}
@_inheritsConvenienceInitializers @objc(TestUtils) public class TestUtils : ObjectiveC.NSObject {
  public enum Environment : Swift.CaseIterable {
    case production
    case qa
    case ext_qa
    case dev
    public var info: (label: Swift.String, envUrl: Swift.String, waterfallUrl: Swift.String, testWaterfallUrl: Swift.String) {
      get
    }
    public static func == (a: KidozSDK.TestUtils.Environment, b: KidozSDK.TestUtils.Environment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [KidozSDK.TestUtils.Environment]
    public static var allCases: [KidozSDK.TestUtils.Environment] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func getEnvLabels() -> [Swift.String]
  @objc public static func getEnvApiUrl() -> Swift.String?
  public static func setEnvApiUrl(apiUrl: Swift.String)
  @objc public static func getOverrideWaterfallUrl() -> Swift.String?
  public static func setOverrideWaterfallUrl(waterfallUrl: Swift.String?)
  public static func getTestWaterfallUrl() -> Swift.String?
  public static func setTestWaterfallUrl(waterfallUrl: Swift.String?)
  @objc public static func setEnvironment(environmentStr: Swift.String)
  public static func setEnvironment(environment: KidozSDK.TestUtils.Environment)
  @objc public static func setCampaignIds(campaignIds: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(KidozRewardedAd) public class KidozRewardedAd : ObjectiveC.NSObject {
  @objc public static func load(delegate: KidozSDK.KidozRewardedDelegate)
  @objc public func isLoaded() -> Swift.Bool
  @objc public func show(viewController: UIKit.UIViewController)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(KidozInterstitialAd) public class KidozInterstitialAd : ObjectiveC.NSObject {
  @objc public static func load(delegate: KidozSDK.KidozInterstitialDelegate)
  @objc public func isLoaded() -> Swift.Bool
  @objc public func show(viewController: UIKit.UIViewController)
  @objc deinit
}
extension KidozSDK.TestUtils.Environment : Swift.Equatable {}
extension KidozSDK.TestUtils.Environment : Swift.Hashable {}
